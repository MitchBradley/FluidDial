int  e4_powers[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };
e4_t e4Pow10(int power) {
    if (power < -4) {
        power = -4;
    } else if (power > 5) {
        power = 5;
    }
    return e4_powers[power + 4]
}
e4_t e4_add(e4_t n1, e4_t n2) {
    return n1 + n2;
}
e4_t e4_subtract(e4_t n1, e4_t n2) {
    return n1 - n2;
}
e4_t e4_mmToInch(e4_t mm) {
    // For rounded, return (((mm * 100) / 254) + 5) / 10;
    return mm * 10 / 254;
}
e4_t e4_inchToMm(e4_t inch) {
    return inch * 254 / 10;
}
const char* e4ToCStr(e4_t n, int ndecimals) {
    static char buf[12];
    buf[11] = '\0';
    char* p = &buf[11];

    if (ndecimals < 0) {
        ndecimals = 0;
    } else if (ndecimals > 4) {
        ndecimals = 4;
    }
    int omit = 4 - ndecimals;
    if (omit) {
        n /= e4_powers[omit];
    }
    bool isneg = n < 0;
    if (isneg) {
        n = -n;
    }
    for (int i = 0; i < ndecimals; ++i) {
        *--p = "0123456789"[n % 10];
        n /= 10;
    }
    if (ndecimals) {
        *--p = '.';
    }
    do {
        *--p = "0123456789"[n % 10];
        n /= 10;
    } while (n);
    if (isneg) {
        *--p = '-';
    }
    return p;
}
