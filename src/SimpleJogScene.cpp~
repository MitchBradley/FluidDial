#if 0
// Copyright (c) 2023 Mitch Bradley
// Use of this source code is governed by a GPLv3 license that can be found in the LICENSE file.

#    include "Menu.h"
#    include "ConfirmScene.h"

int n_digits = 2;

class Jog2AxisScene : public Menu {
private:
    int _dist_index[3] = { n_digits, n_digits, n_digits };
    int max_index() { return n_digits + 3; }  // 10^3 = 1000;
    int _selected_mask = 1 << 0;

public:
    Jog2AxisScene() : Menu("JogAxes") {}
    float distance(int axis) { return pow(10.0, _dist_index[axis] - n_digits); }
    void  unselect_all() { _selected_mask = 0; }
    bool  selected(int axis) { return _selected_mask & (1 << axis); }
    bool  only(int axis) { return _selected_mask == (1 << axis); }

    int  next(int axis) { return (axis < 2) ? axis + 1 : 0; }
    void select(int axis) { _selected_mask |= 1 << axis; }
    void unselect(int axis) { _selected_mask &= ~(1 << axis); }

    void reDisplay() {
        drawBackground(BLACK);
        drawMenuTitle(current_scene->name());

        DRO dro(30, 68, 200, 32);
        for (size_t axis = 0; axis < 3; axis++) {
            dro.draw(axis, 2, _dist_index[axis], selected(axis));
        }
        drawPngFile("/zero.png", { 20, -85 });
        refreshDisplay();
    }
    void zero_axes() {
        String cmd = "G10L20P0";
        for (int axis = 0; axis < 3; axis++) {
            if (selected(axis)) {
                cmd += axisNumToString(axis) + "0";
            }
        }
        log_println(cmd);
        send_line(cmd);
    }
    void onEntry(void* arg) {
        if (arg && strcmp((const char*)arg, "Confirmed") == 0) {
            zero_axes();
        }
    }

    int which(int x, int y) {
        if (y > 130) {
            return 2;
        }
        return y > 90 ? 1 : 0;
    }

    void confirm_zero_axis(void* arg) { push_scene(&confirmScene, (void*)"Zero axis?"); }
    void increment_distance(int axis) {
        if (_dist_index[axis] < max_index()) {
            ++_dist_index[axis];
        }
    }
    void increment_distance() {
        for (int axis = 0; axis < 3; axis++) {
            if (selected(axis)) {
                increment_distance(axis);
            }
        }
    }
    void decrement_distance(int axis) {
        if (_dist_index[axis] > 0) {
            --_dist_index[axis];
        }
    }

    void decrement_distance() {
        for (int axis = 0; axis < 3; axis++) {
            if (selected(axis)) {
                decrement_distance(axis);
            }
        }
    }
    void rotate_distance() {
        for (int axis = 0; axis < 3; axis++) {
            if (selected(axis)) {
                if (++_dist_index[axis] >= max_index()) {
                    _dist_index[axis] = 0;
                }
            }
        }
    }
    void cancel_jog(void* arg = nullptr) {
        log_println("Cancel");
        fnc_realtime(JogCancel);
    }
    void onTouchRelease(int x, int y) {
        int axis = which(x, y);
        if (axis < 0) {
            return;
        }
        if (x < 80) {
            if (selected(axis)) {
                unselect(axis);
                select(next(axis));
            } else {
                unselect_all();
                select(axis);
            }
        } else if (x < 160) {
            increment_distance(axis);
        } else {
            decrement_distance(axis);
        }
        reDisplay();
    }
    void onTouchHold(int x, int y) {
        if (x < 80) {
            int axis = which(x, y);
            if (selected(axis) && !only(axis)) {
                unselect(axis);
            } else {
                select(axis);
            }
            reDisplay();
            return;
        }
        if (x < 160 && y > 160) {
            zero_axes();
        }
    }

    void onTouchFlick(int x, int y, int dx, int dy) override {
        int    absdx = std::abs(dx);
        int    absdy = std::abs(dy);
        String fl    = "Flick ";
        fl += String(x) + " ";
        fl += String(y) + "   ";
        fl += String(dx) + " ";
        fl += String(dy) + " ";
        log_println(fl);
        if (absdy < 30 && dx < -40) {  // Flick left
            pop_scene();
            return;
        }
        if (absdx < 30) {
            if (dy > 40) {  // Flick down
                decrement_distance();
            } else if (dy < -40) {
                increment_distance();
            }
            reDisplay();
            return;
        }
    }
    void onDialButtonPress() { cancel_jog(); }

    void start_mpg_jog(int delta) {
        // e.g. $J=G91F1000X-10000
        String cmd("$J=G91F10000");
        for (int axis = 0; axis < 3; ++axis) {
            if (selected(axis)) {
                float dist = delta * distance(axis);
                cmd += axisNumToString(axis) + floatToString(dist, 2);
            }
        }
        send_line(cmd);
        log_println(cmd);
    }
    void start_button_jog(const char* direction) {
        // e.g. $J=G91F1000X-10000
        float total_distance = 0;
        int   n_axes         = 0;
        for (int axis = 0; axis < 3; ++axis) {
            if (selected(axis)) {
                float axis_distance = distance(axis);
                total_distance += axis_distance * axis_distance;
                ++n_axes;
            }
        }
        total_distance = sqrtf(total_distance);

        float feedrate = total_distance * 300;  // go 10x the highlighted distance in 1 second

        String cmd("$J=G91F" + floatToString(feedrate, 2));
        for (int axis = 0; axis < 3; ++axis) {
            if (selected(axis)) {
                float axis_distance;
                if (n_axes == 1) {
                    axis_distance = 10000;
                } else {
                    axis_distance = distance(axis) * 20;
                }
                cmd += axisNumToString(axis) + direction + floatToString(axis_distance, 0);
            }
        }
        send_line(cmd);
        log_println(cmd);
    }

    void onGreenButtonPress() {
        if (state == Idle) {
            start_button_jog("");
        }
    }
    void onGreenButtonRelease() { cancel_jog(); }
    void onRedButtonPress() {
        if (state == Idle) {
            start_button_jog("-");
        }
    }
    void onRedButtonRelease() { cancel_jog(); }

    void onEncoder(int delta) {
        if (delta != 0) {
            start_mpg_jog(delta);
        }
    }

    void onDROChange() { reDisplay(); }
    void onLimitsChange() { reDisplay(); }
    void onAlarm() { reDisplay(); }
};

Scene* initJog2AxisScene() {
    return new Jog2AxisScene();
}
#endif
