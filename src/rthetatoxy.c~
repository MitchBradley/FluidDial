#include <stdio.h>

#define SCALE 12
// #define TWOPISCALED 205887
// #define TWOPISCALED 6434
#define TWOPISCALED 25736
void isincos(int radius, int angle, int* sinp, int* cosp) {
    //    printf(" >angle %d\n", ((angle * 360 * 2) + 1) >> (SCALE + 1));
    angle *= TWOPISCALED;
    angle >>= SCALE;
    int adjust = radius * 4;
    int cos = 0, sin = 0;
    for (int i = 0; i < 10;) {
        cos += adjust;
        printf(" cos %d adjust %d\n", cos, adjust);
        adjust *= angle;
        adjust /= ++i;
        adjust >>= SCALE;
        if (adjust == 0) {
            break;
        }
        sin += adjust;
        printf("   sin %d adjust %d\n", sin, adjust);
        adjust *= angle;
        adjust /= ++i;
        adjust >>= SCALE;
        if (adjust == 0) {
            break;
        }
        adjust = -adjust;
    }
    *sinp = (sin + 2) / 4;
    *cosp = (cos + 2) / 4;
    // printf(">cos %d sin %d\n", *cosp, *sinp);
}
void octant_sincos(int radius, int angle, int* sinp, int* cosp) {
    if (angle < 0) {
        octant_sincos(radius, -angle, sinp, cosp);
        *sinp = -(*sinp);
        return;
    }
    if (angle > (1 << (SCALE - 1))) {  // > 180 degrees
        octant_sincos(radius, (1 << (SCALE)) - angle, sinp, cosp);
        *sinp = -*sinp;
        return;
    }
    if (angle > (1 << (SCALE - 2))) {  // > 90 degrees
        octant_sincos(radius, (1 << (SCALE - 1)) - angle, sinp, cosp);
        *cosp = -(*cosp);
        return;
    }
    if (angle > (1 << (SCALE - 3))) {
        octant_sincos(radius, ((1 << (SCALE - 2)) - angle), sinp, cosp);
        int sin = *cosp;
        *cosp   = *sinp;
        *sinp   = sin;
        return;
    }
    isincos(radius, angle, sinp, cosp);
}
int main() {
    int sin, cos;
    for (int i = -180; i <= 180; i += 15) {
        // isincos(1000, (i << SCALE) / 360, &sin, &cos);
        // printf("I a %d cos %d sin %d\n", i, cos, sin);
        octant_sincos(1000, (i << SCALE) / 360, &sin, &cos);
        printf("O a %d cos %d sin %d\n", i, cos, sin);
    }
    return 0;
}
